/** @file
    host, target and build configurations and settings
    Various components are purpose built for specific targets
    xtd.hpp is a descriptive configuration header that is generated by CMake from the xtd.hpp.in template.
    Various components include xtd.hpp for configuration info
    @copyright David Mott (c) 2016. Distributed under the Boost Software License Version 1.0. See LICENSE.md or http://boost.org/LICENSE_1_0.txt for details.
*/

#pragma once

#if !defined(ON)
  #define ON    1
#endif

#if !defined(OFF)
  #define OFF   0
#endif

#if !defined(YES)
  #define YES   1
#endif

#if !defined(NO)
  #define NO    0
#endif

#if !defined(DOXY_INVOKED)
  #define DOXY_INVOKED 0
#endif

#if !defined(XTD_HAS_UUID)
  #cmakedefine01 XTD_HAS_UUID
#endif

#if !defined(XTD_COLOR_MESSAGES)
  #cmakedefine01 XTD_COLOR_MESSAGES
#endif

#if !defined(XTD_HAS_CODECVT)
  #cmakedefine01 XTD_HAS_CODECVT
#endif

#if !defined(XTD_HAS_EXP_CODECVT)
  #cmakedefine01 XTD_HAS_EXP_CODECVT
#endif

#if !defined(XTD_HAS_ICONV)
  #cmakedefine01 XTD_HAS_ICONV
#endif

#if !defined(XTD_HAS_FILESYSTEM)
  #cmakedefine01 XTD_HAS_FILESYSTEM
#endif

#if !defined(XTD_HAS_EXP_FILESYSTEM)
  #cmakedefine01 XTD_HAS_EXP_FILESYSTEM
#endif

#if !defined(XTD_USE_DBGHELP)
  #define XTD_USE_DBGHELP @XTD_USE_DBGHELP@
#endif

/** @name XTD_COMPILER
    @{*/
#define XTD_COMPILER_MSVC 1
#define XTD_COMPILER_GCC 2
#define XTD_COMPILER @XTD_COMPILER@
    ///@}

/** @name XTD_CPU
    RESERVED FOR FUTURE USE
    @{*/
#define XTD_CPU_ARM32     1
#define XTD_CPU_ARM64     2
#define XTD_CPU_PPC32     4
#define XTD_CPU_PPC64     8
#define XTD_CPU_X32       16
#define XTD_CPU_X64       32
    ///@}

/** @name XTD_OS
    The build/target/host OS selected by cmake configure
    @{*/
#define XTD_OS_ANDROID    0x01
#define XTD_OS_BAREMETAL  0x02
#define XTD_OS_IOS        0x04
#define XTD_OS_LINUX      0x08
#define XTD_OS_WINDOWS    0x10
#define XTD_OS_CYGWIN     0x20
#define XTD_OS_MINGW      0x40
#define XTD_OS_MSYS       0x80

#if !defined(XTD_OS)
  #define XTD_OS @XTD_OS@
#endif
    ///@}

/** @name XTD_CHARSET
    The default character set used in resulting binaries
    @{*/
#define XTD_CHARSET_MBCS      1
#define XTD_CHARSET_UNICODE   2

#if !defined(XTD_CHARSET)
  #define XTD_CHARSET @XTD_CHARSET@
#endif

#if (XTD_CHARSET_UNICODE == XTD_CHARSET)
  using tchar = wchar_t;
  #define __(x) L ## x
#else
  using tchar = char;
  #define __(x)  x
#endif
    ///@}





/** @name XTD_CONFIG
    The build configuration set by cmake configure
    {@*/
#define XTD_CONFIG_DEBUG      1
#define XTD_CONFIG_RELEASE    2

#if !defined(XTD_CONFIG)
  #if defined(NDEBUG) || defined(RELEASE)
    #define XTD_CONFIG XTD_CONFIG_RELEASE
  #else
    #define XTD_CONFIG XTD_CONFIG_DEBUG
  #endif
#endif

#if (XTD_CONFIG_RELEASE == XTD_CONFIG)
  #define D_(...)
  #define R_(...) __VA_ARGS__
#else
  #define D_(...) __VA_ARGS__
  #define R_(...)
#endif
    ///@}

#cmakedefine01 XTD_LOG_TARGET_SYSLOG
#cmakedefine01 XTD_LOG_TARGET_WINDBG
#cmakedefine01 XTD_LOG_TARGET_CSV
#cmakedefine01 XTD_LOG_TARGET_COUT
#cmakedefine01 XTD_LOG_TARGET_XML
  
/** @name Misc macros
    @{*/
#if !defined(NOMINMAX)
  #define NOMINMAX
#endif

#define W_(x) L # x

#define QUOTE2_( x ) # x
#define QUOTE( x ) QUOTE2_( x )

#define CONCAT2_(x, y) x ## y
#define CONCAT(x, y) CONCAT2_(x,y)

#define DEFINE(x) x

#if defined(__COUNTER__)
  #define UNIQUE_IDENTIFIER(_prefix) CONCAT(_prefix, __COUNTER__)
#else
  #define UNIQUE_IDENTIFIER(_prefix) CONCAT(_prefix, __LINE__)
#endif


//__SONAR_OFF__
#if ((XTD_OS_WINDOWS | XTD_OS_MINGW) & XTD_OS)
  #if !defined(_WIN32_WINNT)
    #define _WIN32_WINNT 0x600
  #endif
#endif
//__SONAR_ON__


#if (XTD_COMPILER_MSVC & XTD_COMPILER)
  #define FORCEINLINE __forceinline
  #define NOVTABLE __declspec(novtable)
  #define NORETURN __declspec(noreturn)
  #define MULTIPLE __declspec(selectany)
  #define ALIGN(val) __declspec(align(val))
  #define EXPORT __declspec(dllexport)
  #define TODO( x ) __pragma(message ( __FILE__ "(" QUOTE(__LINE__) ") : TODO : " x  ))
  #define NOTE( x ) __pragma(message ( __FILE__ "(" QUOTE(__LINE__) ") : NOTE : " x  ))
#elif (XTD_COMPILER_GCC & XTD_COMPILER)
  #define FORCEINLINE __attribute__((always_inline))
  #define NOVTABLE
  #define NORETURN __attribute__((noreturn))
  #define MULTIPLE __attribute__ ((weak))
  #define ALIGN(val) __attribute__ ((aligned (val)))
  #define EXPORT __attribute__ ((visibility ("default")))
  #define PRAGMA_(x) _Pragma( #x )
  #if XTD_COLOR_MESSAGES
    #define TODO( x ) PRAGMA_(message ("\e[31mTODO : " x "\e[0m" ))
    #define NOTE( x ) PRAGMA_(message ("\e[32mNOTE : " x  "\e[0m"))
  #else
    #define TODO( x ) PRAGMA_(message ("TODO : " x ))
    #define NOTE( x ) PRAGMA_(message ("NOTE : " x ))
  #endif
#endif

#if !defined(XTD_VERBOSE_BUILD)
    #cmakedefine01 XTD_VERBOSE_BUILD
#endif

#if (!XTD_VERBOSE_BUILD)
    #undef TODO
    #undef NOTE
    #define TODO(...)
    #define NOTE(...)
#endif

#if (XTD_OS_MINGW & XTD_OS)
  TODO("Enabled sealed keyword when available in mingw");
  #define sealed
#endif

    ///@}

/// @defgroup Annotation Annotation and documentation to clarify intent of code

/*! \namespace xtd
    The main namespace of the XTL library
*/
namespace xtd{
    /// @internal
    /// @namespace xtd::_
    /// private namespace not for external consumption
    namespace _{}
    /// @endinternal

    /** @defgroup Concurrent Concurrent algorithms library
    @{
    @namespace xtd::concurrent
    Concurrent algorithms library
    */
    namespace concurrent{}
    /// @}


    /** @defgroup Parsing Text parsing and AST generation library

    Grammars are defined using classes and macros in the xtd::parse namespace.  The fully constructed AST from the start
    rule is created and returned from xtd::parse<>::parse() if the parse succeeds.

    @{
    @namespace xtd::parse
    Grammar and AST declarations
    @example example_parse1.cpp
    @example example_parse2.cpp
    */
    namespace parse{}
    /// @}


    /** @defgroup Sockets General purpose socket communication

    @{
    @namespace xtd::socket
    General purpose socket communication
    */
    namespace socket{}
    /// @}

}

#define forever for(;;)

//System
#if (XTD_OS_LINUX & XTD_OS)
  #if !defined(_GNU_SOURCE)
    #define _GNU_SOURCE
  #endif
#endif

#if ((XTD_OS_MINGW | XTD_OS_WINDOWS) & XTD_OS)
    #include <winsock2.h>
    #include <windows.h>
    #include <Ws2ipdef.h>
    #include <ws2tcpip.h>
    #include <rpc.h>
    #include <psapi.h>
    #if XTD_USE_DBGHELP
      #include <dbghelp.h>
    #endif
    #include <shlobj.h>
#endif

#if ((XTD_OS_LINUX | XTD_OS_CYGWIN | XTD_OS_MSYS) & XTD_OS)
  #include <sys/types.h>
  #include <sys/socket.h>
  #include <sys/ioctl.h>
  #include <netinet/in.h>
  #include <netinet/udp.h>
  #include <netinet/tcp.h>
  #include <arpa/inet.h>
  #include <unistd.h>
  #include <limits.h>
  #include <poll.h>
  #include <dlfcn.h>
  #include <cxxabi.h>
  #include <dirent.h>
#endif

#if (XTD_OS_LINUX & XTD_OS)
  #include <link.h>
#endif

//CRT
#include <string.h>


//STL


#include <algorithm>
#include <chrono>
#include <condition_variable>
TODO("Remove cassert when XTD implementation is finished")
#include <cassert>
#include <cstdint>
#include <cstdlib>
#include <cwctype>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <future>
#include <iostream>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <mutex>
#include <regex>
#include <stack>
#include <stdexcept>
#include <string>
#include <thread>
#include <typeinfo>
#include <type_traits>
#include <vector>

#if (XTD_HAS_FILESYSTEM)
  #include <filesystem>
#elif (XTD_HAS_EXP_FILESYSTEM)
  #include <experimental/filesystem>
#endif

//3rd party
#if (XTD_HAS_UUID)
    #include <uuid/uuid.h>
#endif

#if (XTD_HAS_CODECVT)
  #include <codecvt>
#elif (XTD_HAS_EXP_CODECVT)
  #include <experimental/codecvt>
#elif (XTD_HAS_ICONV)
  #include <iconv.h>
#endif


#if (XTD_LOG_TARGET_SYSLOG)
    #include <syslog.h>
#endif

//XTL
#include <xtd/callback.hpp>
#include <xtd/meta.hpp>

#include <xtd/concurrent/concurrent.hpp>

#include <xtd/source_location.hpp>
#include <xtd/exception.hpp>
#include <xtd/string.hpp>
#include <xtd/filesystem.hpp>
#include <xtd/executable.hpp>
#include <xtd/dynamic_library.hpp>
#include <xtd/event_trace.hpp>
#include <xtd/log.hpp>
#include <xtd/debug.hpp>

#include <xtd/parse.hpp>
#include <xtd/process.hpp>
#include <xtd/socket.hpp>
#include <xtd/tuple.hpp>
#include <xtd/unique_id.hpp>
#include <xtd/rpc.hpp>
#include <xtd/var.hpp>

#if (XTD_OS_WINDOWS & XTD_OS)
  #include <xtd/windows/dbghelp.hpp>
#endif

#include <xtd/nlp/nlp.hpp>

#include <xtd/exception.inl>
